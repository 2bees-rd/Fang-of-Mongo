A brief introduction to Fang of Mongo internals.

Warning:
I am backend  programmer, this is my first attempt to design both mongo tool and
complicated javascript ui.The whole concept of this application is experimental
and there is probably a lot to improve in it.


1. Django parts

    On serwer side, see fangofmongo/fom/views.py and urls.py.
    Fom defines few views which either show its user interface
    (mainly start page and page with fom user interface)
    or access mongodb (^rest.*). The first ones will return rendered html templates,
    the latter json with returned data. There is really nothing complicate there.

2. User interface

   My assumption is that Fom is build from independent components (like database list, collection list)
   which communicate with each other by sending messages via message bus.
   
   A component may send signal to the bus, bus will pass it to all listeners
   and if one of components decide that this signal requires some action, it is free to do it.
   For example if you click on database in database list, it will send signal "database_selected".
   When collection list will receive that signal, it will send ajax request to get list of collecions
   from database. Returning set odf collections will also be seen as message to sent bus (collection_list_reveived)
   and any interested component may use it (like collection list will use it to present it to the user).

   So we have:
 
     - a message bus. If you write component it will likely be interested in receiving some messages,
       so it has to call listen method of messagebus object.

     - a set of components, like database list, collection list. collection info and others

     - mongo_ajax object for accessing mongo via ajax calls.
     
     - understanding those ideas, you will be able to modify existing code
       or - better - create your won components. You cen create them eitter
       by subclassing existing ones (if you want enhance or replace them) or creating 
       entirely new functionality.

    There are also some ui elements that simplify creation of commonly used ideas (like list of items)
     
3. Few words about plugins

    A plugin is just xml file, and may contain:
        - some metainformation like name or wersion
        - js code
        - html and css code that will be embedded in page.

   Becouse even core fom functionality like listing databases and collection has been separated to plugins,
   you are free to enhance or replace them with better ones, just by adding new plugins

   